#identify what direction a face is pointing towards: either up, down, left, or right
#knn

import random, math
import pandas as pd
import numpy as np
import scipy.io
import matplotlib
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

matplotlib.style.use('ggplot')

Test_PCA = False

def Plot2DBoundary(model,DTrain, LTrain, DTest, LTest):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_title('Transformed Boundary, Image Space -> 2D')
    padding = 0.1  
    resolution = 1
    colors = ['blue','green','orange','red']
    x_min, x_max = DTrain[:, 0].min(), DTrain[:, 0].max()
    y_min, y_max = DTrain[:, 1].min(), DTrain[:, 1].max()
    x_range = x_max - x_min
    y_range = y_max - y_min
    x_min -= x_range * padding
    y_min -= y_range * padding
    x_max += x_range * padding
    y_max += y_range * padding
    xx, yy = np.meshgrid(np.arange(x_min, x_max, resolution),
                         np.arange(y_min, y_max, resolution))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, cmap=plt.cm.terrain, z=-100)
    x_size = x_range * 0.05
    y_size = y_range * 0.05
    img_num = 0
    for index in LTest.index:
        x0, y0 = DTest[img_num,0]-x_size/2., DTest[img_num,1]-y_size/2.
        x1, y1 = DTest[img_num,0]+x_size/2., DTest[img_num,1]+y_size/2.
        img = df.iloc[index,:].reshape(num_pixels, num_pixels)
        ax.imshow(img,
                  aspect='auto',
                  cmap=plt.cm.gray,
                  interpolation='nearest',
                  zorder=100000,
                  extent=(x0, x1, y0, y1),
                  alpha=0.8)
        img_num += 1
    for label in range(len(np.unique(LTrain))):
        indices = np.where(LTrain == label)
        ax.scatter(DTrain[indices, 0], DTrain[indices, 1], c=colors[label], alpha=0.8, marker='o')
    plt.show()

mat = scipy.io.loadmat('face_data.mat')
df = pd.DataFrame(mat['images']).T
num_images, num_pixels = df.shape
num_pixels = int(math.sqrt(num_pixels))
for i in range(num_images):
    df.loc[i,:] = df.loc[i,:].reshape(num_pixels, num_pixels).T.reshape(-1)
    
face_label=pd.read_csv('F:\\MS Data Science\\Programming with Python for Data Science\\face_labels.csv',header=None)
face_label.columns=['label']
y=face_label['label']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(df,y,test_size=0.15,random_state=7)

if Test_PCA:
    from sklearn.decomposition import PCA
    pca=PCA(n_components=2)
    fit=pca.fit(x_train)
    x_train=fit.transform(x_train)
    x_test=fit.transform(x_test)
else:
    from sklearn.manifold import Isomap
    isomap=Isomap(n_neighbors=5,n_components=2)
    fit=isomap.fit(x_train)
    x_train=fit.transform(x_train)
    x_test=fit.transform(x_test)
    
from sklearn.neighbors import KNeighborsClassifier
kneighborsclassifier=KNeighborsClassifier(n_neighbors=5)
model=kneighborsclassifier.fit(x_train,y_train)
predict=model.predict(x_test)

model.score(x_test,y_test)

%matplotlib notebook
Plot2DBoundary(model,x_train, y_train, x_test, y_test)

