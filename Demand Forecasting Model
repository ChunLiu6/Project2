from azureml import Workspace
ws = Workspace()
experiment = ws.experiments['-----------------']
ds = experiment.get_intermediate_dataset(
    node_id='---------------',
    port_name='Results dataset',
    data_type_id='GenericCSV'
)
frame = ds.to_dataframe()

import pandas as pd
dayOfWeek=frame[['dayOfWeek','cnt']].groupby('dayOfWeek').count()
dayOfWeek

frame['dayOfWeek1']=frame['dayOfWeek']
frame['dayOfWeek1'][frame['dayOfWeek']=='Sun']=0
frame['dayOfWeek1'][frame['dayOfWeek']=='Mon']=1
frame['dayOfWeek1'][frame['dayOfWeek']=='Tue']=2
frame['dayOfWeek1'][frame['dayOfWeek']=='Wed']=3
frame['dayOfWeek1'][frame['dayOfWeek']=='Thr']=4
frame['dayOfWeek1'][frame['dayOfWeek']=='Fri']=5
frame['dayOfWeek1'][frame['dayOfWeek']=='Sat']=6
frame

from sklearn.model_selection import train_test_split
frame_train, frame_test = train_test_split(frame, test_size=0.4, random_state=1234)

import numpy as np
from sklearn.ensemble import RandomForestRegressor
nrow=frame_train.shape[0]
X=frame_train[X].as_matrix().reshape(nrow,13)
Y=frame_train[['cnt']].as_matrix().reshape(nrow,1)

nrow1=frame_test.shape[0]
X1=frame_test[['season','yr','mnth','hr','holiday','workingday','weathersit','temp',
         'hum','windspeed','weekday (2)','dayOfWeek1','days']].as_matrix().reshape(nrow1,13)
Y1=frame_test[['cnt']].as_matrix().reshape(nrow1,1)

regr = RandomForestRegressor(max_depth=32, random_state=0)
rf=regr.fit(X,Y)
temp=rf.predict(X1)
frame_test['predicted']=temp
frame_test['resids']=(frame_test['predicted']-frame_test['cnt'])
SSE=sum(x*x for x in frame_test['resids'])
Ybar=frame['cnt'].mean()
SST=sum([(x-Ybar)**2 for x in frame_test['cnt']])
R2_adj=1.0-(SSE/SST)*((nrow1-1)/(nrow1-14))
R2_adj

def ts_bikes(df, times):
    import matplotlib
    matplotlib.use('agg')  
    import matplotlib.pyplot as plt
    for tm in times:
        fig = plt.figure(figsize=(8, 6))
        fig.clf()
        ax = fig.gca()
        df[df.hr == tm].plot(kind = 'line', 
                              x = 'days', y = 'cnt', ax = ax)          
        df[df.hr == tm].plot(kind = 'line', 
                              x = 'days', y = 'predicted', color = 'red', ax = ax)                                    
        plt.xlabel("Days from start")
        plt.ylabel("Number of bikes rented")
        plt.title("Bikes rented for hour = " + str(tm))
        fig.savefig('ts_' + str(tm) + '.png')
    return 'Done'

def resids(df):
    df['resids'] = df.predicted - df.cnt
    return df        
        
def box_resids(df):
    import matplotlib
    matplotlib.use('agg')  # Set backend
    import matplotlib.pyplot as plt
    
    df = resids(df)
    
    fig = plt.figure(figsize=(12, 6))
    fig.clf()
    ax = fig.gca()  
    df.boxplot(column = ['resids'], by = ['hr'], ax = ax)   
    plt.xlabel('')
    plt.ylabel('Residuals')
    fig.savefig('boxes' + '.png')
    return 'Done'
    
 
def ts_resids_hist(df, times):
    import matplotlib
    matplotlib.use('agg')  # Set backend
    import matplotlib.pyplot as plt
    for tm in times:
        fig = plt.figure(figsize=(8, 6))
        fig.clf()
        ax = fig.gca()
        ax.hist(df.ix[df.hr == tm, 'resids'].as_matrix(), bins = 30)
        plt.xlabel("Residuals")
        plt.ylabel("Density")
        plt.title("Histograms of residuals for hour = " + str(tm))
        fig.savefig('hist_' + str(tm) + '.png')
       
    return 'Done'


%matplotlib inline
times = [6, 8, 10, 12, 14, 16, 18, 20, 22]
df=frame_test.sort(['days', 'hr'], axis = 0, ascending = True)
ts_bikes(df, times)

box_resids(df)

ts_resids_hist(df, times)

