f1<-read.csv("gene.csv")
head(f1)

#correlation matrix


x=aggregate(f1$tab,by=list(f1$tab),FUN=length)
x
head(f1[f1$tab==x$Group.1[1],][4:16])

install.packages("corrplot")
library("corrplot")


windows()
for ( i in 1:length(x$Group.1)){
temp=f1[f1$tab==x$Group.1[i],][4:16]
temp
corrplot(cor(temp))
title(x$Group.1[i],line=2.5)

}







#visualize time series



month=rep(0,nrow(f1))
date=rep(0,nrow(f1))
year=rep(0,nrow(f1))

strsplit(as.character(f1$Date.From.Clm[1]),"/")[[1]][3]

for (i in 1:nrow(f1))
{
month[i]=strsplit(as.character(f1$Date.From.Clm[i]),"/")[[1]][1]
date[i]=strsplit(as.character(f1$Date.From.Clm[i]),"/")[[1]][2]
year[i]=strsplit(as.character(f1$Date.From.Clm[i]),"/")[[1]][3]
}
f2<-cbind(f1,month,date,year)

head(f2)
class(f2$month)
class(f2$date)
class(f2$year)

datestr=paste(as.character(f2$year),"-",as.character(f2$month),"-",
as.character(f2$date),sep="")
f2$dateTime=as.POSIXct(strptime(datestr,"%Y-%m-%d"))

head(f2)

f3<-aggregate(f2$payment.rate.base,by=list(f2$tab,f2$dateTime),FUN=mean)
head(f3)
f4<-f3[order(f3$Group.1,f3$Group.2),]
f4
length(f4$x)
unique(f4$x)
write.csv(f4,"f4.csv")

head(f4)
names(f4)=c("tab","dateTime","average_score")
head(f4)
summary(f4$dateTime)
summary(f4$average_score)
unique(f4$tab)
plot(f4$dateTime[f4$tab=="Aqu"],f4$average_score[f4$tab=="Aqu"],type="l",
main="Time series of each physician starting from 2012-09-01",xlab="time",ylab="score",ylim=c(0,2),
xlim=c(as.POSIXct(strptime("2012-09-01","%Y-%m-%d")),as.POSIXct(strptime("2013-05-15","%Y-%m-%d"))))
lines(f4$dateTime[f4$tab=="Cha"],f4$average_score[f4$tab=="Cha"],col="red")
lines(f4$dateTime[f4$tab=="Gur"],f4$average_score[f4$tab=="Gur"],col="aquamarine3")
lines(f4$dateTime[f4$tab=="Kal"],f4$average_score[f4$tab=="Kal"],col="azure4")
lines(f4$dateTime[f4$tab=="Kha"],f4$average_score[f4$tab=="Kha"],col="bisque3")
lines(f4$dateTime[f4$tab=="Lee"],f4$average_score[f4$tab=="Lee"],col="brown")
lines(f4$dateTime[f4$tab=="Mal"],f4$average_score[f4$tab=="Mal"],col="orange")
lines(f4$dateTime[f4$tab=="Res"],f4$average_score[f4$tab=="Res"],col="green")
lines(f4$dateTime[f4$tab=="Rho"],f4$average_score[f4$tab=="Rho"],col="burlywood3")
lines(f4$dateTime[f4$tab=="Sav"],f4$average_score[f4$tab=="Sav"],col="blue")
lines(f4$dateTime[f4$tab=="She"],f4$average_score[f4$tab=="She"],col="purple")
lines(f4$dateTime[f4$tab=="Tse"],f4$average_score[f4$tab=="Tse"],col="chartreuse4")
lines(f4$dateTime[f4$tab=="Uma"],f4$average_score[f4$tab=="Uma"],col="cyan3")
lines(f4$dateTime[f4$tab=="Val"],f4$average_score[f4$tab=="Val"],col="darkred")


#arima model



f7<-aggregate(f2$payment.rate.base,by=list(f2$dateTime),FUN=mean)
head(f7)
names(f7)<-c("dateTime","average_score")
f8<-f7[order(f7$dateTime),][2:nrow(f7),]
head(f8)
nrow(f8)


acf(ts(f8$average_score))
pacf(ts(f8$average_score))
plot(f8$dateTime[2:nrow(f8)],f8$average_score[2:nrow(f8)],type="l")



result=array(0, dim = c(6, 6, 3))
result
for (k in 1:3){
  for(i in 1:6){
    for (j in 1:6){
      model=arima(ts(f8$average_score[1:79]),order=c(i-1,k-1,j),method="ML",include.mean=FALSE)
      temp=rep("bad",i-1+j)
        for (ik in 1:(i-1+j)) {
        if(is.na(sqrt(diag(model$var.coef)[ik]))) {temp[ik]="bad"}
        else if (abs(model$coef[ik])>1.96*sqrt(diag(model$var.coef)[ik])) {temp[ik]="good"}
        }
      if (sum(temp=="bad")>0) {result[i,j,k]="bad"}
      else {result[i,j,k]=model$aic}
      }
  }  
}
result
model=arima(ts(f8$average_score[1:79]),order=c(0,1,1),include.mean=FALSE) 
model

install.packages("forecast")
library("forecast")

length(f8$average_score)

forecast1=forecast(model,h=84-79+3)
fore=forecast1$mean
fore
y=f8$average_score[80:84]
plot(y-fore,ylim=c(-1,1))
abline(h=1.96*sqrt(model$sigma2),col="blue")
abline(h=-1.96*sqrt(model$sigma2),col="blue")
plot(ts(f8$average_score),type="l")
plot(forecast1)
lines(x=seq(80,84),y=f8$average_score[80:84],col="red")
abline(h=mean(f6$payment.rate.base),col="green")
abline(h=median(f6$payment.rate.base),col="orange")
abline(h=1,col="red")




#amount billed per visit



f12<-read.csv("amt_billed.csv")
head(f12)
nrow(f12)
class(f12$Sum.of.Amt.Billed)
sum(is.na(f12$Sum.of.Amt.Billed)==TRUE)

head(f2)
nrow(f2)


head(f2)
f13<-cbind(f2[1:16],f12[4])
head(f13)


f13<-f13[f2$year!=1964,]
sum(is.na(f13$Sum.of.Amt.Billed)==TRUE)
head(f13)
nrow(f13)

f13[,4:16]=scale(f13[,4:16])
head(f13)
ncol(f13)




#conjoint analysis for each provider

result=list()


model_lm<-function(data)

{
  set.seed(12345)
  rn=runif(nrow(data))
  data$rn=rn
  data2<-data[order(data$rn,decreasing=TRUE),]
  data2$rn=NULL
  sum(is.na(data2$Sum.of.Amt.Billed)==TRUE)
  nrow(data2)
  n1=ceiling(0.7*nrow(data))
  f15<-data2[1:n1,]
  f16<-data2[(n1+1):nrow(data2),]
  if (nrow(f15)>=5 & nrow(f16)>=5 & sum(is.na(f15$Sum.of.Amt.Billed)==TRUE)==0 & 
    sum(is.na(f16$Sum.of.Amt.Billed)==TRUE)==0)

  {

    model=lm(Sum.of.Amt.Billed~.+0,data=f15[4:ncol(f15)])
    summary_model=summary(model)
    result[[1]]=summary_model
    predict=predict(model,newdata=f16)
    if (sum(is.na(f16$Sum.of.Amt.Billed)==TRUE)==0)
    {
      ssr=sum((predict-mean(f16$Sum.of.Amt.Billed))^2)
      sse=sum((f16$Sum.of.Amt.Billed-predict)^2)
      r2=ssr/(ssr+sse)
      result[[2]]=r2
      residuals=f16$Sum.of.Amt.Billed-predict
      par(mfrow=c(3,1))
      plot(residuals)
      hist(residuals)
      boxplot(residuals)
      #p-value<0.05
      significant=summary_model$coefficients[which(summary_model$coefficients[,4]<0.05),] 
      result[[3]]=significant
      summary_feature=summary_model$coefficients
      max_utility=max(summary_feature[summary_feature[,4]<0.05,1])
      max_utility_feature=rownames(summary_feature)[summary_feature[,1]==max_utility]     
      result[[4]]=max_utility_feature
      result[[5]]=max_utility
    }
  }
result
}


tab=unique(f13$tab)

uti=data.frame(feature=rep("a",length(tab)),coef=rep(0,length(tab)),
stringsAsFactors	=FALSE)
uti
class(uti$feature)
class(uti$coef)
uti_model=list()
class(uti$feature)
class(rep("a",length(tab)))
class(uti$coef)

temp=rep(0,16-4+1)


names(temp)=names(f13[4:16])

uti_matrix=matrix(rep(0,16-4+1),nrow=(16-4+1),ncol=length(tab))

uti_result=list()

utility<-function(data)
{
  for ( i in 1:length(unique(data$tab)))
  { 
        result=model_lm(data[data$tab==tab[i],])
        if (length(result)!=0)
        {
          if(result[[5]]>0)
          
          {
            uti$feature[i]=result[[4]]
            uti$coef[i]=result[[5]]
            uti_model[[i]]=result
            for ( j in 1:nrow(result[[3]]))
            {
              temp[names(temp)==rownames(result[[3]])[j]]=result[[3]][j,1]
            }
            uti_matrix[,i]=temp
          }
         }   
   }
uti_result[[1]]=print(uti)
uti_result[[2]]=uti_model
uti_result[[3]]=uti_matrix
uti_result

}

head(f13)
max_utility=utility(f13)






#conjoint analysis for all providers




uti_mat=t(max_utility[[3]])


uti_mat1=matrix(cbind(uti_mat[,1:4],uti_mat[,8:9]),nrow=14)

uti_mat2=matrix(rbind(uti_mat1[1,],uti_mat1[4:5,],uti_mat1[7:8,],
uti_mat1[10:11,],uti_mat1[13:14,]),nrow=9)


class(tab)
tab1<-as.character(tab)

rownames(uti_mat2)=c(tab1[1],tab1[4:5],tab1[7:8],tab1[10:11],tab1[13:14])
names(f13[4:16])
colnames(uti_mat2)=c(names(f13[4:7]),names(f13[11:12]))

class(uti_mat2)

max(uti_mat2)*13



margin<-read.csv("payment_rate.csv")

margin=rbind(margin[1:4,],margin[8:9,])
margin$Proc.Code=paste("X",margin$Proc.Code,sep="")

margin1<-as.matrix(margin$payment.rate)
class(margin1)



dim(uti_mat1)
dim(margin1)





profit<-function(offered, utils, margin){
  
  offered1<-c(1, offered)
  
  uOffered <- t(apply(utils, 1, function(x)(x * offered1)))
  maxUtil <- apply(uOffered, 1, max)
  
  prodHighest<-matrix(0, nrow(utils), ncol(utils))
  
  for(i in 1:nrow(utils)){
    for(j in 1:ncol(utils)){
      if(uOffered[i, j] == maxUtil[i]) {prodHighest[i,j]=1;break}
    }
  }
  profitVec<-apply(prodHighest, 1, function(x){x %*% margin})
  sum(profitVec)
}



obj<-function(offered, utils, margin, numProd){
  
  pr<-profit(offered, utils, margin)
  penalty<-10*max(margin)*abs(sum(offered)-numProd)
  
  pr-penalty
}


install.packages("GA")
library("GA")

set.seed(0)
gaOpt<-ga("binary", fitness=obj, utils=uti_mat1, margin=margin1, numProd=3, 
nBits=length(margin), maxiter=100)


summary(gaOpt)
sol <- gaOpt@solution
sol

print(paste("Number of solutions:",nrow(sol)))
install.packages("knitr")
library("knitr")
kable(margin[which(c(sol[1,])==1),])
par(mfrow=c(1,1))
plot(gaOpt)


profit(sol[1,], uti_mat2, margin1)





#factor analysis

install.packages("nFactors")
library("nFactors")


head(f13)

nScree(f13[4:16], cor=TRUE)


fit <- principal(f13[4:16],nfactors=2, rotate="varimax",scores=TRUE)
fit
head(fit$values)
head(fit$scores)

plot(fit)



unique(f1[,1])
f3=""
for ( i in 1:length(tab))
{f3[f1[,1]==tab[i]]=i}

head(f3)
par(mfrow=c(1,1))
biplot(fit)
colnames(fit$scores) = c("c81", "c83") 
biplot(fit$scores, fit$loadings, xlabs=f3,cex=c(0.75,0.6)) 
abline(h=0) #add a horizontal line in the graph
abline(v=0)


#k means
head(f13)
std_seg_data=f13[4:17]
head(std_seg_data)
set.seed(1990)
codes <-kmeans(std_seg_data, 3, iter.max=100,nstart=100)
codes
cluster=codes$cluster
kmeans_summary <- aggregate(std_seg_data,by=list(codes$cluster),FUN=mean)
kmeans_summary
head(cluster)
length(cluster)

f14<-cbind(f13[1],cluster)

head(f14)


cluster1=data.frame(cluster=1,X81225="low", X81227="low",X81240="low",
X81401="low", X83891="high",price=13310.484)

cluster2=data.frame(cluster=2,X81225="low", X81227="low",X81240="low",
X81401="low", X83891="low", price=4148.068)


cluster3=data.frame(cluster=3,X81225="high", X81227="high",X81240="high", 
X81401="high", X83891="low",  price=7864.825)

nrow(cluster1)
ncol(cluster1)


cluster123<-rbind(cluster1,cluster2,cluster3)
cluster123

f17 <- merge(f14,cluster123,by="cluster")
head(f17)

f18=cbind(consumer_id=f17$tab,choicesetid=1:nrow(f17),
alter=f17$cluster,choice=TRUE,f17[3:ncol(f17)])

head(f18)
nrow(f18)
ncol(f18)
tail(f18)

c=c(1,2,3)


f19=f18
for ( i in 1:nrow(f19))
{
  add=cluster123[(f17$cluster[i]!=c),]
  add1=data.frame(consumer_id=rep(f19$consumer_id[i],2))
  add2=data.frame(choice=rep(FALSE,2))
  add3=data.frame(choicesetid=rep(i,2))
  add4=cbind(add1,add3,alter=add[,1],add2,add[,2:ncol(add)])
  f19=rbind(f19,add4)
}
names(add4)==names(f19)
head(f19)
tail(f19,10)
nrow(f18)*3
nrow(f19)

f20<-f19[order(f19$choicesetid,f19$alter),]
head(f20)
rownames(f20)<-1:nrow(f20)
tail(f20)

f21=cbind(f20[1:5],f20[9:10])


install.packages("mlogit")
library("mlogit")

install.packages("knitr")
library("knitr")

install.packages("xtable")
library("xtable")

install.packages("caret")
library("caret")

install.packages("e1071")
library("e1071")


mdata <- mlogit.data(data=f20,
choice='choice', # variable that contains choice
shape='long', # tells mlogit how data is structured (every row is alternative)
varying=5:18, # columns that contain variables that vary across alternatives
alt.levels = paste('alter',1:3), # levels of the alternatives
id.var='consumer_id') # consumer id
kable(head(mdata,6))



model <- mlogit(choice~0+X81225+price,
data=mdata) # 0+ tells model to exclude intercept
summary(model)
kable(xtable(summary(model)$CoefTable))




head(predict(model,mdata),5)

predicted_alternative <- apply(predict(model,mdata),1,which.max)
selected_alternative <- f20$alter[f20$choice>0]
confusionMatrix(predicted_alternative,selected_alternative,positive = "1")



